// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `grpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GetVersionRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVersionRequest {
    fn default() -> &'a GetVersionRequest {
        <GetVersionRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetVersionRequest {
    pub fn new() -> GetVersionRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetVersionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVersionRequest {
        GetVersionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetVersionRequest>(
                    "GetVersionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVersionRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetVersionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVersionRequest,
        };
        unsafe {
            instance.get(GetVersionRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetVersionRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVersionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVersionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVersionReply {
    // message fields
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVersionReply {
    fn default() -> &'a GetVersionReply {
        <GetVersionReply as ::protobuf::Message>::default_instance()
    }
}

impl GetVersionReply {
    pub fn new() -> GetVersionReply {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetVersionReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVersionReply {
        GetVersionReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &GetVersionReply| { &m.version },
                    |m: &mut GetVersionReply| { &mut m.version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetVersionReply>(
                    "GetVersionReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVersionReply {
        static mut instance: ::protobuf::lazy::Lazy<GetVersionReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVersionReply,
        };
        unsafe {
            instance.get(GetVersionReply::new)
        }
    }
}

impl ::protobuf::Clear for GetVersionReply {
    fn clear(&mut self) {
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVersionReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVersionReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalanceRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalanceRequest {
    fn default() -> &'a GetBalanceRequest {
        <GetBalanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceRequest {
    pub fn new() -> GetBalanceRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetBalanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalanceRequest {
        GetBalanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetBalanceRequest>(
                    "GetBalanceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetBalanceRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetBalanceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetBalanceRequest,
        };
        unsafe {
            instance.get(GetBalanceRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetBalanceRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalanceReply {
    // message fields
    pub balance: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalanceReply {
    fn default() -> &'a GetBalanceReply {
        <GetBalanceReply as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceReply {
    pub fn new() -> GetBalanceReply {
        ::std::default::Default::default()
    }

    // uint64 balance = 1;


    pub fn get_balance(&self) -> u64 {
        self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance = 0;
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: u64) {
        self.balance = v;
    }
}

impl ::protobuf::Message for GetBalanceReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.balance = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.balance != 0 {
            my_size += ::protobuf::rt::value_size(1, self.balance, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.balance != 0 {
            os.write_uint64(1, self.balance)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalanceReply {
        GetBalanceReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "balance",
                    |m: &GetBalanceReply| { &m.balance },
                    |m: &mut GetBalanceReply| { &mut m.balance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetBalanceReply>(
                    "GetBalanceReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetBalanceReply {
        static mut instance: ::protobuf::lazy::Lazy<GetBalanceReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetBalanceReply,
        };
        unsafe {
            instance.get(GetBalanceReply::new)
        }
    }
}

impl ::protobuf::Clear for GetBalanceReply {
    fn clear(&mut self) {
        self.balance = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalanceReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTradeStatisticsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTradeStatisticsRequest {
    fn default() -> &'a GetTradeStatisticsRequest {
        <GetTradeStatisticsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTradeStatisticsRequest {
    pub fn new() -> GetTradeStatisticsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetTradeStatisticsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTradeStatisticsRequest {
        GetTradeStatisticsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetTradeStatisticsRequest>(
                    "GetTradeStatisticsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTradeStatisticsRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetTradeStatisticsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTradeStatisticsRequest,
        };
        unsafe {
            instance.get(GetTradeStatisticsRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetTradeStatisticsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTradeStatisticsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTradeStatisticsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTradeStatisticsReply {
    // message fields
    pub TradeStatistics: ::protobuf::RepeatedField<super::pb::TradeStatistics2>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTradeStatisticsReply {
    fn default() -> &'a GetTradeStatisticsReply {
        <GetTradeStatisticsReply as ::protobuf::Message>::default_instance()
    }
}

impl GetTradeStatisticsReply {
    pub fn new() -> GetTradeStatisticsReply {
        ::std::default::Default::default()
    }

    // repeated .io.bisq.protobuffer.TradeStatistics2 TradeStatistics = 1;


    pub fn get_TradeStatistics(&self) -> &[super::pb::TradeStatistics2] {
        &self.TradeStatistics
    }
    pub fn clear_TradeStatistics(&mut self) {
        self.TradeStatistics.clear();
    }

    // Param is passed by value, moved
    pub fn set_TradeStatistics(&mut self, v: ::protobuf::RepeatedField<super::pb::TradeStatistics2>) {
        self.TradeStatistics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_TradeStatistics(&mut self) -> &mut ::protobuf::RepeatedField<super::pb::TradeStatistics2> {
        &mut self.TradeStatistics
    }

    // Take field
    pub fn take_TradeStatistics(&mut self) -> ::protobuf::RepeatedField<super::pb::TradeStatistics2> {
        ::std::mem::replace(&mut self.TradeStatistics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetTradeStatisticsReply {
    fn is_initialized(&self) -> bool {
        for v in &self.TradeStatistics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.TradeStatistics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.TradeStatistics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.TradeStatistics {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTradeStatisticsReply {
        GetTradeStatisticsReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pb::TradeStatistics2>>(
                    "TradeStatistics",
                    |m: &GetTradeStatisticsReply| { &m.TradeStatistics },
                    |m: &mut GetTradeStatisticsReply| { &mut m.TradeStatistics },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTradeStatisticsReply>(
                    "GetTradeStatisticsReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTradeStatisticsReply {
        static mut instance: ::protobuf::lazy::Lazy<GetTradeStatisticsReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTradeStatisticsReply,
        };
        unsafe {
            instance.get(GetTradeStatisticsReply::new)
        }
    }
}

impl ::protobuf::Clear for GetTradeStatisticsReply {
    fn clear(&mut self) {
        self.TradeStatistics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTradeStatisticsReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTradeStatisticsReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOffersRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOffersRequest {
    fn default() -> &'a GetOffersRequest {
        <GetOffersRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOffersRequest {
    pub fn new() -> GetOffersRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetOffersRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOffersRequest {
        GetOffersRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetOffersRequest>(
                    "GetOffersRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOffersRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetOffersRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOffersRequest,
        };
        unsafe {
            instance.get(GetOffersRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetOffersRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOffersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOffersRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOffersReply {
    // message fields
    pub offers: ::protobuf::RepeatedField<super::pb::Offer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOffersReply {
    fn default() -> &'a GetOffersReply {
        <GetOffersReply as ::protobuf::Message>::default_instance()
    }
}

impl GetOffersReply {
    pub fn new() -> GetOffersReply {
        ::std::default::Default::default()
    }

    // repeated .io.bisq.protobuffer.Offer offers = 1;


    pub fn get_offers(&self) -> &[super::pb::Offer] {
        &self.offers
    }
    pub fn clear_offers(&mut self) {
        self.offers.clear();
    }

    // Param is passed by value, moved
    pub fn set_offers(&mut self, v: ::protobuf::RepeatedField<super::pb::Offer>) {
        self.offers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_offers(&mut self) -> &mut ::protobuf::RepeatedField<super::pb::Offer> {
        &mut self.offers
    }

    // Take field
    pub fn take_offers(&mut self) -> ::protobuf::RepeatedField<super::pb::Offer> {
        ::std::mem::replace(&mut self.offers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetOffersReply {
    fn is_initialized(&self) -> bool {
        for v in &self.offers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.offers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.offers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.offers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOffersReply {
        GetOffersReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pb::Offer>>(
                    "offers",
                    |m: &GetOffersReply| { &m.offers },
                    |m: &mut GetOffersReply| { &mut m.offers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOffersReply>(
                    "GetOffersReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOffersReply {
        static mut instance: ::protobuf::lazy::Lazy<GetOffersReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOffersReply,
        };
        unsafe {
            instance.get(GetOffersReply::new)
        }
    }
}

impl ::protobuf::Clear for GetOffersReply {
    fn clear(&mut self) {
        self.offers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOffersReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOffersReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentAccountsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentAccountsRequest {
    fn default() -> &'a GetPaymentAccountsRequest {
        <GetPaymentAccountsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentAccountsRequest {
    pub fn new() -> GetPaymentAccountsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPaymentAccountsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaymentAccountsRequest {
        GetPaymentAccountsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetPaymentAccountsRequest>(
                    "GetPaymentAccountsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetPaymentAccountsRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetPaymentAccountsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetPaymentAccountsRequest,
        };
        unsafe {
            instance.get(GetPaymentAccountsRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetPaymentAccountsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentAccountsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentAccountsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPaymentAccountsReply {
    // message fields
    pub paymentAccounts: ::protobuf::RepeatedField<super::pb::PaymentAccount>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPaymentAccountsReply {
    fn default() -> &'a GetPaymentAccountsReply {
        <GetPaymentAccountsReply as ::protobuf::Message>::default_instance()
    }
}

impl GetPaymentAccountsReply {
    pub fn new() -> GetPaymentAccountsReply {
        ::std::default::Default::default()
    }

    // repeated .io.bisq.protobuffer.PaymentAccount paymentAccounts = 1;


    pub fn get_paymentAccounts(&self) -> &[super::pb::PaymentAccount] {
        &self.paymentAccounts
    }
    pub fn clear_paymentAccounts(&mut self) {
        self.paymentAccounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_paymentAccounts(&mut self, v: ::protobuf::RepeatedField<super::pb::PaymentAccount>) {
        self.paymentAccounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paymentAccounts(&mut self) -> &mut ::protobuf::RepeatedField<super::pb::PaymentAccount> {
        &mut self.paymentAccounts
    }

    // Take field
    pub fn take_paymentAccounts(&mut self) -> ::protobuf::RepeatedField<super::pb::PaymentAccount> {
        ::std::mem::replace(&mut self.paymentAccounts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetPaymentAccountsReply {
    fn is_initialized(&self) -> bool {
        for v in &self.paymentAccounts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.paymentAccounts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paymentAccounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paymentAccounts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPaymentAccountsReply {
        GetPaymentAccountsReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pb::PaymentAccount>>(
                    "paymentAccounts",
                    |m: &GetPaymentAccountsReply| { &m.paymentAccounts },
                    |m: &mut GetPaymentAccountsReply| { &mut m.paymentAccounts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetPaymentAccountsReply>(
                    "GetPaymentAccountsReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetPaymentAccountsReply {
        static mut instance: ::protobuf::lazy::Lazy<GetPaymentAccountsReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetPaymentAccountsReply,
        };
        unsafe {
            instance.get(GetPaymentAccountsReply::new)
        }
    }
}

impl ::protobuf::Clear for GetPaymentAccountsReply {
    fn clear(&mut self) {
        self.paymentAccounts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPaymentAccountsReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPaymentAccountsReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlaceOfferRequest {
    // message fields
    pub currencyCode: ::std::string::String,
    pub direction: ::std::string::String,
    pub price: u64,
    pub useMarketBasedPrice: bool,
    pub marketPriceMargin: f64,
    pub amount: u64,
    pub minAmount: u64,
    pub buyerSecurityDeposit: f64,
    pub paymentAccountId: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlaceOfferRequest {
    fn default() -> &'a PlaceOfferRequest {
        <PlaceOfferRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlaceOfferRequest {
    pub fn new() -> PlaceOfferRequest {
        ::std::default::Default::default()
    }

    // string currencyCode = 1;


    pub fn get_currencyCode(&self) -> &str {
        &self.currencyCode
    }
    pub fn clear_currencyCode(&mut self) {
        self.currencyCode.clear();
    }

    // Param is passed by value, moved
    pub fn set_currencyCode(&mut self, v: ::std::string::String) {
        self.currencyCode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currencyCode(&mut self) -> &mut ::std::string::String {
        &mut self.currencyCode
    }

    // Take field
    pub fn take_currencyCode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currencyCode, ::std::string::String::new())
    }

    // string direction = 2;


    pub fn get_direction(&self) -> &str {
        &self.direction
    }
    pub fn clear_direction(&mut self) {
        self.direction.clear();
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: ::std::string::String) {
        self.direction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_direction(&mut self) -> &mut ::std::string::String {
        &mut self.direction
    }

    // Take field
    pub fn take_direction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.direction, ::std::string::String::new())
    }

    // uint64 price = 3;


    pub fn get_price(&self) -> u64 {
        self.price
    }
    pub fn clear_price(&mut self) {
        self.price = 0;
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: u64) {
        self.price = v;
    }

    // bool useMarketBasedPrice = 4;


    pub fn get_useMarketBasedPrice(&self) -> bool {
        self.useMarketBasedPrice
    }
    pub fn clear_useMarketBasedPrice(&mut self) {
        self.useMarketBasedPrice = false;
    }

    // Param is passed by value, moved
    pub fn set_useMarketBasedPrice(&mut self, v: bool) {
        self.useMarketBasedPrice = v;
    }

    // double marketPriceMargin = 5;


    pub fn get_marketPriceMargin(&self) -> f64 {
        self.marketPriceMargin
    }
    pub fn clear_marketPriceMargin(&mut self) {
        self.marketPriceMargin = 0.;
    }

    // Param is passed by value, moved
    pub fn set_marketPriceMargin(&mut self, v: f64) {
        self.marketPriceMargin = v;
    }

    // uint64 amount = 6;


    pub fn get_amount(&self) -> u64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    // uint64 minAmount = 7;


    pub fn get_minAmount(&self) -> u64 {
        self.minAmount
    }
    pub fn clear_minAmount(&mut self) {
        self.minAmount = 0;
    }

    // Param is passed by value, moved
    pub fn set_minAmount(&mut self, v: u64) {
        self.minAmount = v;
    }

    // double buyerSecurityDeposit = 8;


    pub fn get_buyerSecurityDeposit(&self) -> f64 {
        self.buyerSecurityDeposit
    }
    pub fn clear_buyerSecurityDeposit(&mut self) {
        self.buyerSecurityDeposit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_buyerSecurityDeposit(&mut self, v: f64) {
        self.buyerSecurityDeposit = v;
    }

    // string paymentAccountId = 9;


    pub fn get_paymentAccountId(&self) -> &str {
        &self.paymentAccountId
    }
    pub fn clear_paymentAccountId(&mut self) {
        self.paymentAccountId.clear();
    }

    // Param is passed by value, moved
    pub fn set_paymentAccountId(&mut self, v: ::std::string::String) {
        self.paymentAccountId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paymentAccountId(&mut self) -> &mut ::std::string::String {
        &mut self.paymentAccountId
    }

    // Take field
    pub fn take_paymentAccountId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.paymentAccountId, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PlaceOfferRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currencyCode)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.direction)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.price = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.useMarketBasedPrice = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.marketPriceMargin = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.minAmount = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.buyerSecurityDeposit = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.paymentAccountId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.currencyCode.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.currencyCode);
        }
        if !self.direction.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.direction);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::value_size(3, self.price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.useMarketBasedPrice != false {
            my_size += 2;
        }
        if self.marketPriceMargin != 0. {
            my_size += 9;
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minAmount != 0 {
            my_size += ::protobuf::rt::value_size(7, self.minAmount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.buyerSecurityDeposit != 0. {
            my_size += 9;
        }
        if !self.paymentAccountId.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.paymentAccountId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.currencyCode.is_empty() {
            os.write_string(1, &self.currencyCode)?;
        }
        if !self.direction.is_empty() {
            os.write_string(2, &self.direction)?;
        }
        if self.price != 0 {
            os.write_uint64(3, self.price)?;
        }
        if self.useMarketBasedPrice != false {
            os.write_bool(4, self.useMarketBasedPrice)?;
        }
        if self.marketPriceMargin != 0. {
            os.write_double(5, self.marketPriceMargin)?;
        }
        if self.amount != 0 {
            os.write_uint64(6, self.amount)?;
        }
        if self.minAmount != 0 {
            os.write_uint64(7, self.minAmount)?;
        }
        if self.buyerSecurityDeposit != 0. {
            os.write_double(8, self.buyerSecurityDeposit)?;
        }
        if !self.paymentAccountId.is_empty() {
            os.write_string(9, &self.paymentAccountId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlaceOfferRequest {
        PlaceOfferRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "currencyCode",
                    |m: &PlaceOfferRequest| { &m.currencyCode },
                    |m: &mut PlaceOfferRequest| { &mut m.currencyCode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "direction",
                    |m: &PlaceOfferRequest| { &m.direction },
                    |m: &mut PlaceOfferRequest| { &mut m.direction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "price",
                    |m: &PlaceOfferRequest| { &m.price },
                    |m: &mut PlaceOfferRequest| { &mut m.price },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "useMarketBasedPrice",
                    |m: &PlaceOfferRequest| { &m.useMarketBasedPrice },
                    |m: &mut PlaceOfferRequest| { &mut m.useMarketBasedPrice },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "marketPriceMargin",
                    |m: &PlaceOfferRequest| { &m.marketPriceMargin },
                    |m: &mut PlaceOfferRequest| { &mut m.marketPriceMargin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &PlaceOfferRequest| { &m.amount },
                    |m: &mut PlaceOfferRequest| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "minAmount",
                    |m: &PlaceOfferRequest| { &m.minAmount },
                    |m: &mut PlaceOfferRequest| { &mut m.minAmount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "buyerSecurityDeposit",
                    |m: &PlaceOfferRequest| { &m.buyerSecurityDeposit },
                    |m: &mut PlaceOfferRequest| { &mut m.buyerSecurityDeposit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "paymentAccountId",
                    |m: &PlaceOfferRequest| { &m.paymentAccountId },
                    |m: &mut PlaceOfferRequest| { &mut m.paymentAccountId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PlaceOfferRequest>(
                    "PlaceOfferRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PlaceOfferRequest {
        static mut instance: ::protobuf::lazy::Lazy<PlaceOfferRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PlaceOfferRequest,
        };
        unsafe {
            instance.get(PlaceOfferRequest::new)
        }
    }
}

impl ::protobuf::Clear for PlaceOfferRequest {
    fn clear(&mut self) {
        self.currencyCode.clear();
        self.direction.clear();
        self.price = 0;
        self.useMarketBasedPrice = false;
        self.marketPriceMargin = 0.;
        self.amount = 0;
        self.minAmount = 0;
        self.buyerSecurityDeposit = 0.;
        self.paymentAccountId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlaceOfferRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlaceOfferRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlaceOfferReply {
    // message fields
    pub result: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlaceOfferReply {
    fn default() -> &'a PlaceOfferReply {
        <PlaceOfferReply as ::protobuf::Message>::default_instance()
    }
}

impl PlaceOfferReply {
    pub fn new() -> PlaceOfferReply {
        ::std::default::Default::default()
    }

    // bool result = 1;


    pub fn get_result(&self) -> bool {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = false;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: bool) {
        self.result = v;
    }
}

impl ::protobuf::Message for PlaceOfferReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.result = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != false {
            os.write_bool(1, self.result)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlaceOfferReply {
        PlaceOfferReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "result",
                    |m: &PlaceOfferReply| { &m.result },
                    |m: &mut PlaceOfferReply| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PlaceOfferReply>(
                    "PlaceOfferReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PlaceOfferReply {
        static mut instance: ::protobuf::lazy::Lazy<PlaceOfferReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PlaceOfferReply,
        };
        unsafe {
            instance.get(PlaceOfferReply::new)
        }
    }
}

impl ::protobuf::Clear for PlaceOfferReply {
    fn clear(&mut self) {
        self.result = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlaceOfferReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlaceOfferReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopServerRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopServerRequest {
    fn default() -> &'a StopServerRequest {
        <StopServerRequest as ::protobuf::Message>::default_instance()
    }
}

impl StopServerRequest {
    pub fn new() -> StopServerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StopServerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopServerRequest {
        StopServerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StopServerRequest>(
                    "StopServerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StopServerRequest {
        static mut instance: ::protobuf::lazy::Lazy<StopServerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StopServerRequest,
        };
        unsafe {
            instance.get(StopServerRequest::new)
        }
    }
}

impl ::protobuf::Clear for StopServerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopServerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopServerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopServerReply {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopServerReply {
    fn default() -> &'a StopServerReply {
        <StopServerReply as ::protobuf::Message>::default_instance()
    }
}

impl StopServerReply {
    pub fn new() -> StopServerReply {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StopServerReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopServerReply {
        StopServerReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StopServerReply>(
                    "StopServerReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StopServerReply {
        static mut instance: ::protobuf::lazy::Lazy<StopServerReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StopServerReply,
        };
        unsafe {
            instance.get(StopServerReply::new)
        }
    }
}

impl ::protobuf::Clear for StopServerReply {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopServerReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopServerReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ngrpc.proto\x12\x13io.bisq.protobuffer\x1a\x08pb.proto\"\x13\n\x11Get\
    VersionRequest\"+\n\x0fGetVersionReply\x12\x18\n\x07version\x18\x01\x20\
    \x01(\tR\x07version\"\x13\n\x11GetBalanceRequest\"+\n\x0fGetBalanceReply\
    \x12\x18\n\x07balance\x18\x01\x20\x01(\x04R\x07balance\"\x1b\n\x19GetTra\
    deStatisticsRequest\"j\n\x17GetTradeStatisticsReply\x12O\n\x0fTradeStati\
    stics\x18\x01\x20\x03(\x0b2%.io.bisq.protobuffer.TradeStatistics2R\x0fTr\
    adeStatistics\"\x12\n\x10GetOffersRequest\"D\n\x0eGetOffersReply\x122\n\
    \x06offers\x18\x01\x20\x03(\x0b2\x1a.io.bisq.protobuffer.OfferR\x06offer\
    s\"\x1b\n\x19GetPaymentAccountsRequest\"h\n\x17GetPaymentAccountsReply\
    \x12M\n\x0fpaymentAccounts\x18\x01\x20\x03(\x0b2#.io.bisq.protobuffer.Pa\
    ymentAccountR\x0fpaymentAccounts\"\xe1\x02\n\x11PlaceOfferRequest\x12\"\
    \n\x0ccurrencyCode\x18\x01\x20\x01(\tR\x0ccurrencyCode\x12\x1c\n\tdirect\
    ion\x18\x02\x20\x01(\tR\tdirection\x12\x14\n\x05price\x18\x03\x20\x01(\
    \x04R\x05price\x120\n\x13useMarketBasedPrice\x18\x04\x20\x01(\x08R\x13us\
    eMarketBasedPrice\x12,\n\x11marketPriceMargin\x18\x05\x20\x01(\x01R\x11m\
    arketPriceMargin\x12\x16\n\x06amount\x18\x06\x20\x01(\x04R\x06amount\x12\
    \x1c\n\tminAmount\x18\x07\x20\x01(\x04R\tminAmount\x122\n\x14buyerSecuri\
    tyDeposit\x18\x08\x20\x01(\x01R\x14buyerSecurityDeposit\x12*\n\x10paymen\
    tAccountId\x18\t\x20\x01(\tR\x10paymentAccountId\")\n\x0fPlaceOfferReply\
    \x12\x16\n\x06result\x18\x01\x20\x01(\x08R\x06result\"\x13\n\x11StopServ\
    erRequest\"\x11\n\x0fStopServerReply2j\n\nGetVersion\x12\\\n\nGetVersion\
    \x12&.io.bisq.protobuffer.GetVersionRequest\x1a$.io.bisq.protobuffer.Get\
    VersionReply\"\02j\n\nGetBalance\x12\\\n\nGetBalance\x12&.io.bisq.protob\
    uffer.GetBalanceRequest\x1a$.io.bisq.protobuffer.GetBalanceReply\"\02\
    \x8a\x01\n\x12GetTradeStatistics\x12t\n\x12GetTradeStatistics\x12..io.bi\
    sq.protobuffer.GetTradeStatisticsRequest\x1a,.io.bisq.protobuffer.GetTra\
    deStatisticsReply\"\02f\n\tGetOffers\x12Y\n\tGetOffers\x12%.io.bisq.prot\
    obuffer.GetOffersRequest\x1a#.io.bisq.protobuffer.GetOffersReply\"\02\
    \x8a\x01\n\x12GetPaymentAccounts\x12t\n\x12GetPaymentAccounts\x12..io.bi\
    sq.protobuffer.GetPaymentAccountsRequest\x1a,.io.bisq.protobuffer.GetPay\
    mentAccountsReply\"\02j\n\nPlaceOffer\x12\\\n\nPlaceOffer\x12&.io.bisq.p\
    rotobuffer.PlaceOfferRequest\x1a$.io.bisq.protobuffer.PlaceOfferReply\"\
    \02j\n\nStopServer\x12\\\n\nStopServer\x12&.io.bisq.protobuffer.StopServ\
    erRequest\x1a$.io.bisq.protobuffer.StopServerReply\"\0J\x9d!\n\x07\x12\
    \x05\x11\0\x93\x01\x01\n\x92\x05\n\x01\x0c\x12\x03\x11\0\x122\x87\x05\n\
    \x20This\x20file\x20is\x20part\x20of\x20Bisq.\n\n\x20Bisq\x20is\x20free\
    \x20software:\x20you\x20can\x20redistribute\x20it\x20and/or\x20modify\
    \x20it\n\x20under\x20the\x20terms\x20of\x20the\x20GNU\x20Affero\x20Gener\
    al\x20Public\x20License\x20as\x20published\x20by\n\x20the\x20Free\x20Sof\
    tware\x20Foundation,\x20either\x20version\x203\x20of\x20the\x20License,\
    \x20or\x20(at\n\x20your\x20option)\x20any\x20later\x20version.\n\n\x20Bi\
    sq\x20is\x20distributed\x20in\x20the\x20hope\x20that\x20it\x20will\x20be\
    \x20useful,\x20but\x20WITHOUT\n\x20ANY\x20WARRANTY;\x20without\x20even\
    \x20the\x20implied\x20warranty\x20of\x20MERCHANTABILITY\x20or\n\x20FITNE\
    SS\x20FOR\x20A\x20PARTICULAR\x20PURPOSE.\x20See\x20the\x20GNU\x20Affero\
    \x20General\x20Public\n\x20License\x20for\x20more\x20details.\n\n\x20You\
    \x20should\x20have\x20received\x20a\x20copy\x20of\x20the\x20GNU\x20Affer\
    o\x20General\x20Public\x20License\n\x20along\x20with\x20Bisq.\x20If\x20n\
    ot,\x20see\x20<http://www.gnu.org/licenses/>.\n\n\x08\n\x01\x02\x12\x03\
    \x12\0\x1c\nP\n\x02\x03\0\x12\x03\x15\0\x12\x1aE\x20FIXME:\x20IntelliJ\
    \x20does\x20not\x20recognize\x20the\x20import\x20but\x20the\x20compiler\
    \x20does\n\n\x99\x02\n\x02\x06\0\x12\x04\x1e\0!\x012M\x20option\x20java_\
    package\x20=\x20\"bisq.core.grpc\";\n\x20option\x20java_multiple_files\
    \x20=\x20true;\n2\xbd\x01///////////////////////////////////////////////\
    //////////////////////////////////////////\n\x20Version\n///////////////\
    ////////////////////////////////////////////////////////////////////////\
    //\n\n\n\n\x03\x06\0\x01\x12\x03\x1e\x08\x12\n\x0c\n\x04\x06\0\x02\0\x12\
    \x04\x1f\x04\x20\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1f\x08\x12\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03\x1f\x14%\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x1f0?\n\n\n\x02\x04\0\x12\x04#\0$\x01\n\n\n\x03\x04\0\x01\x12\
    \x03#\x08\x19\n\n\n\x02\x04\x01\x12\x04&\0(\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03&\x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03'\x04\x17\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03'\
    \x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03'\x15\x16\n\xca\x01\n\x02\
    \x06\x01\x12\x04.\01\x012\xbd\x01///////////////////////////////////////\
    //////////////////////////////////////////////////\n\x20Balance\n///////\
    ////////////////////////////////////////////////////////////////////////\
    //////////\n\n\n\n\x03\x06\x01\x01\x12\x03.\x08\x12\n\x0c\n\x04\x06\x01\
    \x02\0\x12\x04/\x040\x05\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03/\x08\x12\
    \n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03/\x14%\n\x0c\n\x05\x06\x01\x02\0\
    \x03\x12\x03/0?\n\n\n\x02\x04\x02\x12\x043\04\x01\n\n\n\x03\x04\x02\x01\
    \x12\x033\x08\x19\n\n\n\x02\x04\x03\x12\x046\08\x01\n\n\n\x03\x04\x03\
    \x01\x12\x036\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x037\x04\x17\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x037\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x037\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x037\x15\x16\n\xd2\x01\n\
    \x02\x06\x02\x12\x04>\0A\x012\xc5\x01///////////////////////////////////\
    //////////////////////////////////////////////////////\n\x20TradeStatist\
    ics\n///////////////////////////////////////////////////////////////////\
    //////////////////////\n\n\n\n\x03\x06\x02\x01\x12\x03>\x08\x1a\n\x0c\n\
    \x04\x06\x02\x02\0\x12\x04?\x04@\x05\n\x0c\n\x05\x06\x02\x02\0\x01\x12\
    \x03?\x08\x1a\n\x0c\n\x05\x06\x02\x02\0\x02\x12\x03?\x1c5\n\x0c\n\x05\
    \x06\x02\x02\0\x03\x12\x03?@W\n\n\n\x02\x04\x04\x12\x04C\0D\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03C\x08!\nd\n\x02\x04\x05\x12\x04G\0I\x01\x1aX\x20\
    FIXME:\x20IntelliJ\x20does\x20not\x20recognize\x20the\x20imported\x20Tra\
    deStatistics2\x20but\x20the\x20compiler\x20does\n\n\n\n\x03\x04\x05\x01\
    \x12\x03G\x08\x1f\n\x0b\n\x04\x04\x05\x02\0\x12\x03H\x042\n\x0c\n\x05\
    \x04\x05\x02\0\x04\x12\x03H\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x06\x12\
    \x03H\r\x1d\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03H\x1e-\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03H01\n\xc8\x01\n\x02\x06\x03\x12\x04O\0R\x012\xbb\
    \x01////////////////////////////////////////////////////////////////////\
    /////////////////////\n\x20Offer\n//////////////////////////////////////\
    ///////////////////////////////////////////////////\n\n\n\n\x03\x06\x03\
    \x01\x12\x03O\x08\x11\n\x0c\n\x04\x06\x03\x02\0\x12\x04P\x04Q\x05\n\x0c\
    \n\x05\x06\x03\x02\0\x01\x12\x03P\x08\x11\n\x0c\n\x05\x06\x03\x02\0\x02\
    \x12\x03P\x13#\n\x0c\n\x05\x06\x03\x02\0\x03\x12\x03P.<\n\n\n\x02\x04\
    \x06\x12\x04T\0U\x01\n\n\n\x03\x04\x06\x01\x12\x03T\x08\x18\nY\n\x02\x04\
    \x07\x12\x04X\0Z\x01\x1aM\x20FIXME:\x20IntelliJ\x20does\x20not\x20recogn\
    ize\x20the\x20imported\x20Offer\x20but\x20the\x20compiler\x20does\n\n\n\
    \n\x03\x04\x07\x01\x12\x03X\x08\x16\n\x0b\n\x04\x04\x07\x02\0\x12\x03Y\
    \x04\x1e\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03Y\x04\x0c\n\x0c\n\x05\x04\
    \x07\x02\0\x06\x12\x03Y\r\x12\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03Y\x13\
    \x19\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03Y\x1c\x1d\n\xd1\x01\n\x02\x06\
    \x04\x12\x04`\0c\x012\xc4\x01///////////////////////////////////////////\
    //////////////////////////////////////////////\n\x20PaymentAccount\n////\
    ////////////////////////////////////////////////////////////////////////\
    /////////////\n\n\n\n\x03\x06\x04\x01\x12\x03`\x08\x1a\n\x0c\n\x04\x06\
    \x04\x02\0\x12\x04a\x04b\x05\n\x0c\n\x05\x06\x04\x02\0\x01\x12\x03a\x08\
    \x1a\n\x0c\n\x05\x06\x04\x02\0\x02\x12\x03a\x1c5\n\x0c\n\x05\x06\x04\x02\
    \0\x03\x12\x03a@W\n\n\n\x02\x04\x08\x12\x04e\0f\x01\n\n\n\x03\x04\x08\
    \x01\x12\x03e\x08!\nb\n\x02\x04\t\x12\x04i\0k\x01\x1aV\x20FIXME:\x20Inte\
    lliJ\x20does\x20not\x20recognize\x20the\x20imported\x20PaymentAccount\
    \x20but\x20the\x20compiler\x20does\n\n\n\n\x03\x04\t\x01\x12\x03i\x08\
    \x1f\n\x0b\n\x04\x04\t\x02\0\x12\x03j\x040\n\x0c\n\x05\x04\t\x02\0\x04\
    \x12\x03j\x04\x0c\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03j\r\x1b\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x03j\x1c+\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03j./\n\
    \xcd\x01\n\x02\x06\x05\x12\x04q\0t\x012\xc0\x01/////////////////////////\
    ////////////////////////////////////////////////////////////////\n\x20Pl\
    aceOffer\n//////////////////////////////////////////////////////////////\
    ///////////////////////////\n\n\n\n\x03\x06\x05\x01\x12\x03q\x08\x12\n\
    \x0c\n\x04\x06\x05\x02\0\x12\x04r\x04s\x05\n\x0c\n\x05\x06\x05\x02\0\x01\
    \x12\x03r\x08\x12\n\x0c\n\x05\x06\x05\x02\0\x02\x12\x03r\x14%\n\x0c\n\
    \x05\x06\x05\x02\0\x03\x12\x03r0?\n\x0b\n\x02\x04\n\x12\x05v\0\x80\x01\
    \x01\n\n\n\x03\x04\n\x01\x12\x03v\x08\x19\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03w\x04\x1c\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03w\x04\n\n\x0c\n\x05\x04\
    \n\x02\0\x01\x12\x03w\x0b\x17\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03w\x1a\
    \x1b\n\x0b\n\x04\x04\n\x02\x01\x12\x03x\x04\x19\n\x0c\n\x05\x04\n\x02\
    \x01\x05\x12\x03x\x04\n\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03x\x0b\x14\n\
    \x0c\n\x05\x04\n\x02\x01\x03\x12\x03x\x17\x18\n\x0b\n\x04\x04\n\x02\x02\
    \x12\x03y\x04\x15\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03y\x04\n\n\x0c\n\
    \x05\x04\n\x02\x02\x01\x12\x03y\x0b\x10\n\x0c\n\x05\x04\n\x02\x02\x03\
    \x12\x03y\x13\x14\n\x0b\n\x04\x04\n\x02\x03\x12\x03z\x04!\n\x0c\n\x05\
    \x04\n\x02\x03\x05\x12\x03z\x04\x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\
    \x03z\t\x1c\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03z\x1f\x20\n\x0b\n\x04\
    \x04\n\x02\x04\x12\x03{\x04!\n\x0c\n\x05\x04\n\x02\x04\x05\x12\x03{\x04\
    \n\n\x0c\n\x05\x04\n\x02\x04\x01\x12\x03{\x0b\x1c\n\x0c\n\x05\x04\n\x02\
    \x04\x03\x12\x03{\x1f\x20\n\x0b\n\x04\x04\n\x02\x05\x12\x03|\x04\x16\n\
    \x0c\n\x05\x04\n\x02\x05\x05\x12\x03|\x04\n\n\x0c\n\x05\x04\n\x02\x05\
    \x01\x12\x03|\x0b\x11\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03|\x14\x15\n\
    \x0b\n\x04\x04\n\x02\x06\x12\x03}\x04\x19\n\x0c\n\x05\x04\n\x02\x06\x05\
    \x12\x03}\x04\n\n\x0c\n\x05\x04\n\x02\x06\x01\x12\x03}\x0b\x14\n\x0c\n\
    \x05\x04\n\x02\x06\x03\x12\x03}\x17\x18\n\x0b\n\x04\x04\n\x02\x07\x12\
    \x03~\x04$\n\x0c\n\x05\x04\n\x02\x07\x05\x12\x03~\x04\n\n\x0c\n\x05\x04\
    \n\x02\x07\x01\x12\x03~\x0b\x1f\n\x0c\n\x05\x04\n\x02\x07\x03\x12\x03~\"\
    #\n\x0b\n\x04\x04\n\x02\x08\x12\x03\x7f\x04\x20\n\x0c\n\x05\x04\n\x02\
    \x08\x05\x12\x03\x7f\x04\n\n\x0c\n\x05\x04\n\x02\x08\x01\x12\x03\x7f\x0b\
    \x1b\n\x0c\n\x05\x04\n\x02\x08\x03\x12\x03\x7f\x1e\x1f\n\x0c\n\x02\x04\
    \x0b\x12\x06\x82\x01\0\x84\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\x82\
    \x01\x08\x17\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x83\x01\x04\x14\n\r\n\x05\
    \x04\x0b\x02\0\x05\x12\x04\x83\x01\x04\x08\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\x83\x01\t\x0f\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x83\x01\x12\
    \x13\n\xcf\x01\n\x02\x06\x06\x12\x06\x8a\x01\0\x8d\x01\x012\xc0\x01/////\
    ////////////////////////////////////////////////////////////////////////\
    ////////////\n\x20StopServer\n//////////////////////////////////////////\
    ///////////////////////////////////////////////\n\n\x0b\n\x03\x06\x06\
    \x01\x12\x04\x8a\x01\x08\x12\n\x0e\n\x04\x06\x06\x02\0\x12\x06\x8b\x01\
    \x04\x8c\x01\x05\n\r\n\x05\x06\x06\x02\0\x01\x12\x04\x8b\x01\x08\x12\n\r\
    \n\x05\x06\x06\x02\0\x02\x12\x04\x8b\x01\x14%\n\r\n\x05\x06\x06\x02\0\
    \x03\x12\x04\x8b\x010?\n\x0c\n\x02\x04\x0c\x12\x06\x8f\x01\0\x90\x01\x01\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\x8f\x01\x08\x19\n\x0c\n\x02\x04\r\x12\
    \x06\x92\x01\0\x93\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\x92\x01\x08\x17\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
